{"name":"Indic NLP Library","tagline":"Resources and tools for Indian language Natural Language Processing","body":"#Indic NLP Library\r\n\r\nThe goal of this project is to build Python based libraries for common text processing and Natural Language Processing in Indian languages. Indian languages share a lot of similarity in terms of script, phonology, language syntax, etc. and this library is an attempt to provide a general solution to very commonly required toolsets for Indian language text. \r\n\r\nThe library provides the following functionalities: \r\n\r\n- Text Normalization\r\n- Transliteration\r\n- Tokenization\r\n- Morphological Analysis\r\n\r\nThe data resources required by the Indic NLP Library are hosted in a different repository. These resources are required for some modules. You can download from the [Indic NLP Resources](https://github.com/anoopkunchukuttan/indic_nlp_resources) project.\r\n\r\n## Pre-requisites\r\n\r\n- Python 2.7+\r\n- [Morfessor 2.0 Python Library](http://www.cis.hut.fi/projects/morpho/morfessor2.shtml)\r\n\r\n##Text Normalization\r\n\r\nText written in Indic scripts display a lot of quirky behaviour on account of varying input methods, multiple representations for the same character, etc. \r\nThere is a need to canonicalize the representation of text so that NLP applications can handle the data in a consistent manner. The canonicalization primarily handles the following issues: \r\n\r\n    - Non-spacing characters like ZWJ/ZWNL\r\n    - Multiple representations of Nukta based characters \r\n    - Multiple representations of two part dependent vowel signs\r\n    - Typing inconsistencies: e.g. use of pipe (|) for poorna virama\r\n\r\nYou can check the documentation for each normalizer in the file \r\n`src/normalize/indic_normalize.py` to know the script specific normalizations.    \r\n\r\nThe following scripts are supported:\r\n\r\n_Devanagari(Hindi,Marathi,Sanskrit,Konkani,Nepali), Bengali, Oriya, Gujarati, Gurumukhi (Punjabi), Tamil, Telugu, Kannada, Malayalam_\r\n\r\n###Commandline Usage\r\n\r\n    python src/indic_nlp/normalize/indic_normalize.py <infile> <outfile> <language> [<replace_nukta>]\r\n    \r\n    <language>: 2-letter ISO 639-1 language code. \r\n                Codes for some language not covered in the standard\r\n                kK: Konkani\r\n                bD: Bodo\r\n                mP: Manipuri\r\n    <replace_nukta>: True/False. Default: False                \r\n\r\n###API Usage\r\n\r\ne.g.\r\n\r\n    from indicnlp.normalize.indic_normalize import IndicNormalizerFactory\r\n    input_text=u\"\\u0929 \\u0928\\u093c\"\r\n    remove_nuktas=False\r\n    factory=IndicNormalizerFactory()\r\n    normalizer=factory.get_normalizer(\"hi\",remove_nuktas)\r\n    print normalizer.normalize(input_text)\r\n\r\n##Unicode based Transliteration \r\n\r\nTransliterate from one Indic script to another. This is a simple script which exploits the fact that Unicode points of various Indic scripts are at\r\ncorresponding offsets from the base codepoint for that script. The following scripts are supported:\r\n\r\n_Devanagari(Hindi,Marathi,Sanskrit,Konkani,Nepali), Bengali, Oriya, Gujarati, Gurumukhi (Punjabi), Tamil, Telugu, Kannada, Malayalam_\r\n\r\n###Commandline Usage\r\n\r\n    python src/indic_nlp/transliterate/unicode_transliterate.py <infile> <outfile> <language1> <language2>\r\n    \r\n    <language1>,<language2>: 2-letter ISO 639-1 language code. \r\n                Codes for some language not covered in the standard\r\n                kK: Konkani\r\n                bD: Bodo\r\n                mP: Manipuri\r\n\r\n###API Usage\r\n\r\ne.g.\r\n\r\n    from indicnlp.transliterate.unicode_transliterate import IndicNormalizerFactory\r\n    input_text=u\"\\u0929 \\u0928\\u093c\"\r\n    print UnicodeIndicTransliterator.transliterate(input_text,\"hi\",\"pa\")\r\n\r\n##Tokenization \r\n\r\nA trivial tokenizer which just tokenizes on the punctuation boundaries. This also includes punctuations for the Indian language scripts (the purna virama and the deergha virama). It returns a list of tokens.   \r\n\r\n###Commandline Usage\r\n    python src/indicnlp/tokenize/indic_tokenize.py <infile> <outfile> <language> \r\n    \r\n    <language>: 2-letter ISO 639-1 language code. \r\n                Codes for some language not covered in the standard\r\n                kK: Konkani\r\n                bD: Bodo\r\n                mP: Manipuri\r\n\r\n###API Usage\r\ne.g.\r\n\r\n    from indicnlp.tokenize import indic_tokenize  \r\n    indic_string=u'\\u0905\\u0928\\u0942\\u092a,\\u0905\\u0928\\u0942\\u092a?\\u0964 '\r\n    indic_tokenize.trivial_tokenize(indic_string)\r\n\r\n##Morphological Analysis\r\n\r\nUnsupervised morphological analysers for various Indian language. Given a word, the analyzer returns the componenent morphemes. \r\nThe analyzer can recognize inflectional and derivational morphemes. \r\n\r\nThe following languages are supported:\r\n\r\n_Hindi, Punjabi, Marathi, Konkani, Gujarati, Bengali, Kannada, Tamil, Telugu, Malayalam_\r\n\r\nSupport for more languages will be added soon.\r\n\r\n###Commandline Usage\r\n    python src/indicnlp/morph/unsupervised_morph.py <infile> <outfile> <language> <resource_directory>\r\n    \r\n    <language>: 2-letter ISO 639-1 language code. \r\n                Codes for some language not covered in the standard\r\n                kK: Konkani\r\n                bD: Bodo\r\n                mP: Manipuri\r\n\r\n    <resource_directory>: Path to directory containg Indic NLP library resources. \r\n\r\n###API Usage\r\ne.g.\r\n\r\n    # -*- coding: utf-8 -*-\r\n\r\n    from indicnlp.morph import unsupervised_morph \r\n    from indicnlp import common\r\n\r\n    common.INDIC_RESOURCES_PATH=\"resources\"\r\n\r\n    analyzer=unsupervised_morph.UnsupervisedMorphAnalyzer('mr')\r\n\r\n    indic_string=u'आपल्या हिरड्यांच्या आणि दातांच्यामध्ये जीवाणू असतात .\"\r\n\r\n    analyzes_tokens=analyzer.morph_analyze_document(indic_string.split(' '))\r\n\r\n##Author\r\nAnoop Kunchukuttan ( anoop.kunchukuttan@gmail.com )\r\n\r\n##Version: 0.2\r\n\r\n##Revision Log\r\n0.3 : 21 Oct 2014: Supports morph-analysis between Indian languages\r\n\r\n0.2 : 13 Jun 2014: Supports transliteration between Indian languages and tokenization of Indian languages \r\n\r\n0.1 : 12 Mar 2014: Initial version. Supports text normalization.\r\n\r\n##LICENSE\r\n\r\nCopyright Anoop Kunchukuttan 2013 - present\r\n \r\nIndic NLP Library is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nIndic NLP Library is distributed in the hope that it will be useful, \r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of \r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the \r\nGNU General Public License for more details. \r\n\r\nYou should have received a copy of the GNU General Public License \r\nalong with Indic NLP Library.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}